@page "/tecnologias/lista"
@page "/tecnologias"
@inject HttpClient http
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@using System.Text.Json
@using Prova.Client.Pages.Modals.Modal_Error
@using Prova.Client.Shared
@using Prova.Client.Pages.Modals.ModalCad
@using Prova.Client.Pages.Modals.ModalEdit


<ModalCadTecnologias tecnologias="tecnologia"  Titulo="Cadastrar nova Tecnologia" @ref="RefModal" onCancel="onCancelCad" onConfirm="onConfirmCad">
</ModalCadTecnologias>

<ModalEditTecnologias tecnologias="tecnologiaEdit" Titulo="Editar" @ref="RefModalEdit" onCancel="onCancelEdit" onConfirm="onConfirmEdit">
</ModalEditTecnologias>

<ModalForms Titulo="@Titulo" Subtitulo="@SubTitulo" @ref="RefModals" onCancel="onCancel">
</ModalForms>

<h2 align="center">Lista de Tecnologias</h2>

<div align="center">
    @if (tecnologias == null)
    {
        <text>Carregando...</text>
    }
    else if (tecnologias.Count == 0)
    {

        <table id="tabletecnologias" class="display" style="width:100%">
            <thead class="thead-dark">
                <tr align="center">
                    <th>Tecnologias</th>
                    <th><button class="btn btn-primary" @onclick="@(() => CadNewTecnologia())">Nova Tecnologia</button></th>
                </tr>
            </thead>
            <tbody>
                <tr align="center">
                    <th align="center" colspan="2"><h3>Não há nenhum tipo de tecnologia cadastrado no sistema.</h3></th>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <table id="tabletecnologias" class="display" style="width:auto">
            <thead class="thead-dark">
                <tr align="center">
                    <th>Tecnologia</th>
                    <th><button class="btn btn-primary" @onclick="@(() => CadNewTecnologia())">Nova Tecnologia</button></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tec in tecnologias)
                {
                    <tr align="center">
                        <td>@tec.tecnologia</td>
                        <td>
                            <button class="btn btn-success" @onclick="@(() => EditTecnologia(tec))">Editar</button>
                            <button class="btn btn-danger" @onclick="@(() => ExcluirTecnologia(tec.Id))">Excluir</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>



@code {

    List<Tecnologias> tecnologias;

    Tecnologias tecnologia = new Tecnologias();

    ModalCadTecnologias RefModal;

    Tecnologias tecnologiaEdit;

    ModalEditTecnologias RefModalEdit;

    ModalForms RefModals;

    string Titulo;
    string SubTitulo;

    protected override async Task OnInitializedAsync()
    {
        await LoadTecnologia();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#tabletecnologias");
    }


    async Task LoadTecnologia()
    {
        tecnologias = await http.GetFromJsonAsync<List<Tecnologias>>($"api/tecnologias");
    }

    async Task CriarTecnologia()
    {
        await http.PostAsJsonAsync("api/tecnologias", tecnologia);
    }

    async Task onConfirmCad()
    {
        await Uniques(tecnologia, tecnologias);
        RefModal.Hide();
        await LoadTecnologia();

    }

    public void onCancelCad()
    {
        RefModal.Hide();
    }

    async Task onConfirmEdit()
    {
        RefModalEdit.Hide();
        await EditUniques(tecnologia, tecnologias);
        await LoadTecnologia();
    }

    public void onCancelEdit()
    {
        RefModalEdit.Hide();
    }

    public void onCancel()
    {
        RefModals.Hide();
    }

    public void ShowErrorModal()
    {
        RefModals.Show();
    }

    public void CadNewTecnologia()
    {
        RefModal.Show();
    }

    public void EditTecnologia(Tecnologias tecnologias)
    {
        tecnologiaEdit = tecnologias;
        RefModalEdit.Show();
    }

    async Task EditarTecnologia()
    {
        await http.PutAsJsonAsync($"api/tecnologia", tecnologiaEdit);
        await LoadTecnologia();
    }

    async Task ExcluirTecnologia(int id)
    {
        await http.DeleteAsync($"api/tecnologia/{id}");
        await LoadTecnologia();
    }

    async Task Uniques(Tecnologias tecnologias, List<Tecnologias> lista)
    {
        foreach (Tecnologias s in lista)
        {
            if (tecnologia.tecnologia == s.tecnologia)
            {

                Titulo = "Erro ao Editar";
                SubTitulo = "Não é possível inserir uma tecnologia já existente";

                ShowErrorModal();
                return;
            }
        }
        await CriarTecnologia();
        await LoadTecnologia();
    }

    async Task EditUniques(Tecnologias tecnologias, List<Tecnologias> lista)
    {
        foreach (Tecnologias s in lista)
        {
            if (tecnologias.tecnologia == s.tecnologia)
            {
                Titulo = "Erro ao Editar";
                SubTitulo = "Não é possível inserir uma tecnologia já existente";

                ShowErrorModal();
                return;
            }
        }
        await EditarTecnologia();
        await LoadTecnologia();
    }
}